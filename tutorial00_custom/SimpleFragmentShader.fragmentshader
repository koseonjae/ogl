#version 330 core

in vec2 uv;
in vec3 normalDirection_camera;
in vec3 lightDirection_camera;
in vec3 eyeDirection_camera;
in float distance;

out vec4 fragColor;

uniform sampler2D diffuseSampler;

void main( void )
{
    float lightPower = 50.f;
    vec3 lightColor = vec3(1,1,1);

    vec3 materialDiffuse = texture(diffuseSampler, uv).rgb;
    vec3 materialAmbient = materialDiffuse * 0.1;
    vec3 materialSpecular = vec3(0.3, 0.3, 0.3);

    vec3 n = normalize(normalDirection_camera);
    vec3 l = normalize(lightDirection_camera);
    vec3 v = normalize(eyeDirection_camera);
    vec3 r = reflect(-l, n);

    float cosTheta = clamp(dot(n, l), 0, 1);
    float cosAlpha = clamp(dot(v, r), 0, 1);

    fragColor.rgb = materialAmbient +
                materialDiffuse * lightPower * lightColor * cosTheta / (distance * distance) +
                materialSpecular * lightPower * lightColor * pow(cosAlpha, 5) / (distance * distance);
    fragColor.a = 0.3;
}