#version 330 core

in vec3 normalDirection_camera;
in vec3 vertexPosition_camera;
in vec2 uv;

out vec4 fragColor;

uniform vec3 lightPosition_camera;
uniform sampler2D diffuseSampler;

vec3 phongModel(vec3 position, vec3 n)
{
    float distance = length(position - lightPosition_camera);
    vec3 v = normalize(-position);
    vec3 l = normalize(lightPosition_camera - position);
    vec3 h = normalize(v + l); // r vector를 위한 reflect보다 연산량을 줄임

    float lightPower = 50.f;
    vec3 lightColor = vec3(1, 1, 1);
    vec3 materialDiffuse = texture(diffuseSampler, uv).rgb;
    vec3 materialAmbient = materialDiffuse * 0.1;
    vec3 materialSpecular = vec3(0.3, 0.3, 0.3);

    float cosTheta = clamp(dot(n, l), 0, 1);
    float cosAlpha = clamp(dot(h, n), 0, 1);

    vec3 phongModelColor = materialAmbient +
                           materialDiffuse * lightPower * lightColor * cosTheta / (distance * distance) +
                           materialSpecular * lightPower * lightColor * pow(cosAlpha, 5) / (distance * distance);
    return phongModelColor;
}

void main( void )
{
    float scale = 15.f;

    vec3 n = normalize(normalDirection_camera);

    bvec2 toDiscard = greaterThan(fract(uv * scale), vec2(0.2, 0.2));

    if( all( toDiscard ) )
    {
        discard;
    }
    
    if( gl_FrontFacing )
    {
        fragColor = vec4(phongModel(vertexPosition_camera, n), 1);
    }
    else
    {
        fragColor = vec4(phongModel(vertexPosition_camera, -n), 1);
    }
}