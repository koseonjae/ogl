#version 330 core

in vec2 uv;
in vec3 vertexPosition_worldspace;
in vec3 normalDirection_cameraspace;
in vec3 eyeDirection_cameraspace;
in vec3 lightDirection_cameraspace;

out vec3 color;

uniform sampler2D sampler;
uniform vec3 lightPosition_worldspace;

void main(void)
{
    vec3 n = normalize(normalDirection_cameraspace);
    vec3 l = normalize(lightDirection_cameraspace);
    vec3 v = normalize(eyeDirection_cameraspace);
    vec3 r = reflect(-l, n);
    float d = length(vertexPosition_worldspace - lightPosition_worldspace);

    float lightPower = 50.0f;
    vec3 lightColor = vec3(1.0, 1.0, 1.0);

    vec3 materialDiffuseColor = texture(sampler, uv).rgb;
    vec3 materialAmbientColor = vec3(0.1, 0.1, 0.1) * materialDiffuseColor;
    vec3 materialSpecularColor = vec3(0.3, 0.3, 0.3);

    float cosTheta = clamp(dot(n, l), 0, 1);
    vec3 diffuseColor = materialDiffuseColor * lightColor * lightPower * cosTheta / (d * d);

    float cosAlpha = clamp(dot(r, v), 0, 1);
    vec3 specularColor = materialSpecularColor * lightColor * lightPower * pow(cosAlpha, 5) / (d * d);

    color = materialAmbientColor + diffuseColor + specularColor;
}