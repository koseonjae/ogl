#version 330 core

layout(location = 0) out vec4 fragColor;

uniform sampler2D diffuseSampler;
uniform sampler2D specularSampler;
uniform sampler2D normalSampler;
uniform sampler2DShadow shadowSampler;

in vec2 uv;

in float distance;
in vec3 normalDirection_cameraspace;
in vec3 lightDirection_cameraspace;
in vec3 eyeDirection_cameraspace;
in vec4 ShadowCoord;

void main( void )
{
    vec3 lightColor = vec3(1,1,1);
    float lightPower = 40.f;

    vec3 materialDiffuse = texture(diffuseSampler, uv).rgb;
    vec3 materialAmbient = materialDiffuse * 0.1;
    vec3 materialSpecular = lightColor * 0.3;

    vec3 n = normalize(normalDirection_cameraspace);
    vec3 l = normalize(lightDirection_cameraspace);
    vec3 v = normalize(eyeDirection_cameraspace);
    vec3 r = reflect(-l, n);

    float cosTheta = clamp(dot(n, l), 0, 1);
    float cosAlpha = clamp(dot(v, r), 0, 1);

    float visibility = texture( shadowSampler, vec3(ShadowCoord.xy, (ShadowCoord.z)/ShadowCoord.w) );

    fragColor.rgb = materialAmbient +
                    visibility * lightPower * lightColor * materialDiffuse * cosTheta / (distance * distance) +
                    visibility * lightPower * lightColor * materialSpecular * pow(cosAlpha, 5) / (distance * distance);

    fragColor.a = 1;
}