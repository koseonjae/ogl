#version 330 core

layout(location = 0) in vec3 vertexPosition_model;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_model;
layout(location = 3) in vec3 vertexTangent_model;
layout(location = 4) in vec3 vertexBitangent_model;

uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform mat3 MV3x3;
uniform vec3 lightPosition_world;

out vec2 uv;

out float distance;
out vec3 lightDirection_camera;
out vec3 eyeDirection_camera;
out vec3 normalDirection_camera;
out vec3 lightDirection_tangent;
out vec3 eyeDirection_tangent;

void main( void )
{
    gl_Position = MVP * vec4(vertexPosition_model, 1);

    uv = vertexUV;

    distance = length(lightPosition_world - (M * vec4(vertexPosition_model, 1)).xyz);

    normalDirection_camera = (V * M * vec4(vertexNormal_model, 0)).xyz;

    vec3 vertexPosition_camera = (V * M * vec4(vertexPosition_model, 1)).xyz;
    eyeDirection_camera = vec3(0, 0, 0) - vertexPosition_camera;

    lightDirection_camera = (V * vec4(lightPosition_world, 1)).xyz + eyeDirection_camera;

    vec3 vertexTangent_camera = MV3x3 * vertexTangent_model;
    vec3 vertexBitangent_camera = MV3x3 * vertexBitangent_model;

    mat3 TBN = transpose(mat3(vertexTangent_camera,
                              vertexBitangent_camera,
                              normalDirection_camera));

    lightDirection_tangent = TBN * lightDirection_camera;
    eyeDirection_tangent = TBN * eyeDirection_camera;
}