#version 330 core

layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;

out vec2 uv;
out vec3 vertexPosition_worldspace;
out vec3 normalDirection_cameraspace;
out vec3 eyeDirection_cameraspace;
out vec3 lightDirection_cameraspace;

uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform vec3 lightPosition_worldspace;

void main(void)
{
    gl_Position = MVP * vec4(vertexPosition, 1);
    uv = vertexUV;

    vertexPosition_worldspace = (M * vec4(vertexPosition, 1)).xyz;

    normalDirection_cameraspace = (V * M * vec4(vertexNormal, 0)).xyz;

    vec3 vertexPosition_cameraspace = (V * M * vec4(vertexPosition, 1)).xyz;
    eyeDirection_cameraspace = vec3(0, 0, 0) - vertexPosition_cameraspace;

    vec3 lightPosition_cameraspace = (V * vec4(lightPosition_worldspace, 1)).xyz;
    lightDirection_cameraspace = lightPosition_cameraspace + eyeDirection_cameraspace;
}