#version 330 core

layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec3 vertexTangent;
layout(location = 4) in vec3 vertexBitangent;

uniform mat4 MVP;
uniform mat4 M;
uniform mat4 V;
uniform mat3 MV;
uniform vec3 lightPosition;

out vec2 uv;
out vec3 normalDirection_camera;
out vec3 eyeDirection_camera;
out vec3 lightDirection_camera;
out float distance;

out vec3 eyeDirection_tangent;
out vec3 lightDirection_tangent;

void main( void )
{
    gl_Position = MVP * vec4(vertexPosition, 1);
    uv = vertexUV;

    distance = length((M * vec4(vertexPosition, 1)).xyz - lightPosition);

    vec3 vertexPosition_camera = (V * M * vec4(vertexPosition, 1)).xyz;
    eyeDirection_camera = -vertexPosition_camera;

    vec3 lightPosition_camera = (V * vec4(lightPosition, 1)).xyz;
    lightDirection_camera = lightPosition_camera + eyeDirection_camera;

    mat3 TBN = transpose(mat3(MV * vertexTangent,
                              MV * vertexBitangent,
                              MV * vertexNormal));

    eyeDirection_tangent = TBN * eyeDirection_camera;
    lightDirection_tangent = TBN * lightDirection_camera;
}